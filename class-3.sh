# Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。因此，字符串相关的引号和转义，对 Bash 来说就非常重要。

# 输出特殊字符需要转义
echo \\
echo \$date
echo \&date

# \a：响铃
# \b：退格
# \n：换行
# \r：回车
# \t：制表符

# Bash 允许字符串放在单引号或双引号之中，加以引用。 单引号用于保留字符的字面含义，各种特殊字符在单引号里面，都会变为普通字符，比如星号（*）、美元符号（$）、反斜杠（\）等。

# 双引号比单引号宽松，大部分特殊字符在双引号里面，都会失去特殊含义，变成普通字符。

# 双引号还有一个作用，就是保存原始命令的输出格式。
cal
echo cal
echo $(cal)
echo "$(cal)"

#  环境变量
# env

# 用户创建变量的时候，变量名必须遵守下面的规则。 字母、数字和下划线字符组成。 第一个字符必须是一个字母或一个下划线，不能是数字。 不允许出现空格和标点符号。
myname="scott"
# Bash 没有数据类型的概念，所有的变量值都是字符串。

# 读取变量
echo $myname

a=class-1
echo $a.sh
echo ${a}.sh

# 删除变量
unset myname
echo $myname
unset a

# 将变量放到环境变量中
# export


# declare命令可以声明一些特殊类型的变量，为变量设置一些限制，比如声明只读类型的变量和整数类型的变量。
declare -a temp=$(ls)
echo $temp

# readonly命令等同于declare -r，用来声明只读变量，不能改变变量值，也不能unset变量。


# let命令声明变量时，可以直接执行算术表达式。
let foo=1+2
echo $foo